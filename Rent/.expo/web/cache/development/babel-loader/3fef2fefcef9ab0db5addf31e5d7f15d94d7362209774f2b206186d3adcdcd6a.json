{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { TextInput, Button } from \"react-native-paper\";\nimport { useForm, Controller } from 'react-hook-form';\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useState } from \"react\";\nimport { styles } from \"../assets/styles/styles\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showPass = _useState2[0],\n    setShowPass = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    errorMess = _useState4[0],\n    setErrorMess = _useState4[1];\n  var URL = 'http://127.0.0.1:3600';\n  var _useForm = useForm({\n      defaultValues: {\n        userName: '',\n        password: ''\n      }\n    }),\n    control = _useForm.control,\n    handleSubmit = _useForm.handleSubmit,\n    errors = _useForm.formState.errors,\n    reset = _useForm.reset,\n    setValue = _useForm.setValue;\n  var getValuesArrayUser = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var values = yield axios.get(URL + \"/users\");\n      return new Promise(function (resolve, reject) {\n        if (values.length === 0) {\n          reject(new Error('No existen datos'));\n        } else {\n          setTimeout(function () {\n            resolve(values.data);\n          }, 1500);\n        }\n      });\n    });\n    return function getValuesArrayUser() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var onSignIn = function onSignIn(data) {\n    var userName = data.userName,\n      password = data.password;\n    var users = getValuesArrayUser();\n    users.then(function (values) {\n      AsyncStorage.clear();\n      var findUser = values.find(function (value) {\n        return value.userName == userName && value.password == password;\n      });\n      if (findUser != undefined && findUser.role === '1') {\n        setErrorMess('Iniciando Sesion');\n        AsyncStorage.setItem('keyProfile', JSON.stringify(findUser));\n        setTimeout(function () {\n          navigation.navigate('Profile');\n        }, 3000);\n      } else if (findUser != undefined && findUser.role === '0') {\n        setErrorMess('Iniciando como Administrador');\n        AsyncStorage.setItem('keyProfile', JSON.stringify(findUser));\n        setTimeout(function () {\n          navigation.navigate('Car');\n        }, 3000);\n      } else {\n        setErrorMess('Usuario y/o Contraseña INVALIDA');\n      }\n    }).catch(function (Error) {\n      setErrorMess('Usuario y/o Contraseña INVALIDA');\n    });\n  };\n  return _jsx(View, {\n    style: [styles.container],\n    children: _jsxs(View, {\n      style: [styles.view, {\n        flex: 1\n      }],\n      children: [_jsx(LoginBanner, {\n        name: \"register\"\n      }), _jsx(Text, {\n        style: {\n          fontFamily: 'Arial',\n          fontSize: 40\n        },\n        children: \"Inicia sesi\\xF3n\"\n      })]\n    })\n  });\n}\nfunction LoginBanner(props) {\n  return _jsx(Image, {\n    style: {\n      width: '100%',\n      height: '100%',\n      resizeMode: 'stretch'\n    },\n    source: require(\"../assets/\" + props.name + \".gif\")\n  });\n}","map":{"version":3,"names":["TextInput","Button","useForm","Controller","AsyncStorage","useState","styles","axios","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","_useState2","_slicedToArray","showPass","setShowPass","_useState3","_useState4","errorMess","setErrorMess","URL","_useForm","defaultValues","userName","password","control","handleSubmit","errors","formState","reset","setValue","getValuesArrayUser","_ref2","_asyncToGenerator","values","get","Promise","resolve","reject","length","Error","setTimeout","data","apply","arguments","onSignIn","users","then","clear","findUser","find","value","undefined","role","setItem","JSON","stringify","navigate","catch","View","style","container","children","view","flex","LoginBanner","name","Text","fontFamily","fontSize","props","Image","width","height","resizeMode","source","require"],"sources":["C:/Users/1/Desktop/Moviles3Momento3/Rent/screens/LoginScreen.jsx"],"sourcesContent":["import { Text, View, Image } from \"react-native\";\r\nimport { TextInput, Button } from \"react-native-paper\";\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useState } from \"react\";\r\nimport { styles } from \"../assets/styles/styles\";\r\nimport axios from 'axios';\r\n\r\nexport default function LoginScreen({navigation}) {\r\n    const [showPass,setShowPass] = useState(false)\r\n    const [errorMess,setErrorMess] = useState('');\r\n\r\n    const URL = 'http://127.0.0.1:3600'\r\n\r\n    const { control, handleSubmit, formState: { errors }, reset, setValue } = useForm({\r\n        defaultValues: {\r\n          userName: '',\r\n          password: ''\r\n        }\r\n      });\r\n    \r\n    //Funcion que obtiene los datos\r\n    const getValuesArrayUser = async () =>{\r\n        let values = await axios.get(`${URL}/users`);\r\n        return new Promise((resolve, reject) =>{\r\n            if(values.length === 0){\r\n                reject(new Error('No existen datos'))\r\n            }\r\n            else{\r\n                setTimeout(()=>{ \r\n                    resolve(values.data);\r\n                },1500)\r\n            }\r\n        });\r\n    }\r\n        \r\n    const onSignIn = (data)=>{\r\n        const {userName, password} = data;\r\n        const users = getValuesArrayUser();\r\n        users.then((values) => {\r\n            AsyncStorage.clear()\r\n            let findUser = values.find(value => value.userName == userName  && value.password == password)\r\n            if(findUser != undefined && findUser.role === '1'){\r\n                setErrorMess('Iniciando Sesion')\r\n                AsyncStorage.setItem('keyProfile', JSON.stringify(findUser))\r\n                setTimeout(()=>{\r\n                navigation.navigate('Profile')\r\n                },3000)\r\n            }else if(findUser != undefined && findUser.role === '0'){\r\n                setErrorMess('Iniciando como Administrador')\r\n                AsyncStorage.setItem('keyProfile', JSON.stringify(findUser))\r\n                setTimeout(()=>{\r\n                navigation.navigate('Car')\r\n                },3000)\r\n            }else{\r\n                setErrorMess('Usuario y/o Contraseña INVALIDA')\r\n            }\r\n        }).catch((Error) =>{\r\n            setErrorMess('Usuario y/o Contraseña INVALIDA')\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <View style={[styles.container]}>\r\n            <View style = {[styles.view,{flex:1}]}>\r\n                <LoginBanner name=\"register\"></LoginBanner>\r\n                <Text style={{fontFamily:'Arial',fontSize:40}}>Inicia sesión</Text>\r\n            </View>\r\n            {/* <Text style={{fontFamily:'Arial',fontSize:40}}>Inicia sesión</Text>\r\n            <Text style={{fontFamily:'Arial',fontSize:15,marginTop:10}}>Utiliza tu cuenta de RentCar</Text>\r\n            <Controller\r\n                control={control}\r\n                    rules={{\r\n                    required: true,\r\n                }}\r\n                render={({ field: { onChange, onBlur, value } }) => (\r\n                <TextInput\r\n                    style={styles.texinput}\r\n                    activeOutlineColor=\"#0265FE\"\r\n                    outlineColor=\"#919191\"\r\n                    label=\"Usuario\"\r\n                    mode=\"outlined\"\r\n                    onBlur={onBlur}\r\n                    onChangeText={onChange}\r\n                    value={value}\r\n                />\r\n                )}\r\n              name=\"userName\"\r\n            />\r\n            {errors.userName && <Text style={{ color: 'red' }}>Digite el usuario</Text>}\r\n            \r\n            <Controller\r\n                control={control}\r\n                    rules={{\r\n                    required: true,\r\n                }}\r\n                render={({ field: { onChange, onBlur, value } }) => (\r\n                <TextInput\r\n                    style={styles.texinput}\r\n                    activeOutlineColor=\"#0265FE\"\r\n                    outlineColor=\"#919191\"\r\n                    label=\"Contraseña\"\r\n                    mode=\"outlined\"\r\n                    right={<TextInput.Icon icon={showPass ? \"eye-off\":\"eye\"} onPress={()=>setShowPass(!showPass)}/>}\r\n                    secureTextEntry={!showPass}\r\n                    onBlur={onBlur}\r\n                    onChangeText={onChange}\r\n                    value={value}\r\n                />\r\n                )}\r\n              name=\"password\"\r\n            />\r\n            {errors.password && <Text style={{ color: 'red' }}>Digite la contraseña</Text>}\r\n            <View style={[{ backgroundColor: \"#fff\", flexDirection: \"row\",marginTop:20 }]}>\r\n            <Button\r\n                style={{marginTop:10,marginEnd: 10}}\r\n                textColor=\"#0265FE\"\r\n                onPress={()=>{\r\n                    setTimeout(()=>{\r\n                        setErrorMess('')\r\n                        navigation.navigate('Register')\r\n                    },1000)\r\n                }}\r\n            >Registrarse</Button>\r\n            <Button\r\n                style={{marginTop:10}}\r\n                icon=\"login\"\r\n                mode=\"contained\"\r\n                buttonColor=\"#0265FE\"\r\n                onPress={handleSubmit(onSignIn)}\r\n            >Iniciar Sesión</Button>\r\n            </View>\r\n            <Button\r\n                style={{marginTop:10}}\r\n                textColor=\"#0265FE\"\r\n                onPress={()=>{\r\n                    navigation.navigate('NewPasswordUserScreen')\r\n                    // AsyncStorage.clear()\r\n                }}\r\n            >¿Olvidaste la contraseña?</Button>\r\n            <Text style={{fontFamily:'Arial',fontSize:15,marginTop:20,color:'red'}}>{errorMess}</Text> */}\r\n        </View>\r\n    );\r\n}\r\n\r\nfunction LoginBanner(props) {\r\n    return (\r\n      <Image style={{ width: '100%', height: '100%', resizeMode: 'stretch' }} source={require(`../assets/${props.name}.gif`)}>\r\n      </Image>\r\n    );\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}